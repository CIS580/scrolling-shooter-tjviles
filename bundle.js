(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={ "height":500,
 "layers":[
        {
         "data":[5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 8, 8, 8, 8, 8, 8, 8, 8, 7, 3, 6, 6, 6, 6, 6, 6, 6, 6, 4],
         "height":500,
         "name":"Tile Layer 1",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":10,
         "x":0,
         "y":0
        }],
 "nextobjectid":1,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tileheight":32,
 "tilesets":[
        {
         "columns":2,
         "firstgid":1,
         "image":"dirtquad.png",
         "imageheight":64,
         "imagewidth":64,
         "margin":0,
         "name":"dirtquad",
         "spacing":0,
         "tilecount":4,
         "tileheight":32,
         "tilewidth":32
        }, 
        {
         "columns":1,
         "firstgid":5,
         "image":"dirtside.png",
         "imageheight":32,
         "imagewidth":32,
         "margin":0,
         "name":"dirtside",
         "spacing":0,
         "tilecount":1,
         "tileheight":32,
         "tilewidth":32
        }, 
        {
         "columns":1,
         "firstgid":6,
         "image":"dirtbottom.png",
         "imageheight":32,
         "imagewidth":32,
         "margin":0,
         "name":"dirtbottom",
         "spacing":0,
         "tilecount":1,
         "tileheight":32,
         "tilewidth":32
        }, 
        {
         "columns":1,
         "firstgid":7,
         "image":"dirtside2.png",
         "imageheight":32,
         "imagewidth":32,
         "margin":0,
         "name":"dirtside2",
         "spacing":0,
         "tilecount":1,
         "tileheight":32,
         "tilewidth":32
        }, 
        {
         "columns":1,
         "firstgid":8,
         "image":"dirtmiddle.png",
         "imageheight":32,
         "imagewidth":32,
         "margin":0,
         "name":"dirtmiddle",
         "spacing":0,
         "tilecount":1,
         "tileheight":32,
         "tilewidth":32
        }],
 "tilewidth":32,
 "version":1,
 "width":10
}
},{}],2:[function(require,module,exports){
module.exports={ "height":500,
 "layers":[
        {
         "data":[0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
         "height":500,
         "name":"Tile Layer 1",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":2,
         "x":0,
         "y":0
        }],
 "nextobjectid":1,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tileheight":160,
 "tilesets":[
        {
         "columns":1,
         "firstgid":1,
         "image":"couldbig.png",
         "imageheight":160,
         "imagewidth":160,
         "margin":0,
         "name":"couldbig",
         "spacing":0,
         "tilecount":1,
         "tileheight":160,
         "tilewidth":160
        }],
 "tilewidth":160,
 "version":1,
 "width":2
}
},{}],3:[function(require,module,exports){
module.exports={ "height":500,
 "layers":[
        {
         "data":[0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 0, 3, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         "height":500,
         "name":"Tile Layer 1",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":5,
         "x":0,
         "y":0
        }],
 "nextobjectid":1,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tileheight":64,
 "tilesets":[
        {
         "columns":1,
         "firstgid":1,
         "image":"cloud1.png",
         "imageheight":64,
         "imagewidth":64,
         "margin":0,
         "name":"cloud1",
         "spacing":0,
         "tilecount":1,
         "tileheight":64,
         "tilewidth":64
        }, 
        {
         "columns":1,
         "firstgid":2,
         "image":"cloud2.png",
         "imageheight":64,
         "imagewidth":64,
         "margin":0,
         "name":"cloud2",
         "spacing":0,
         "tilecount":1,
         "tileheight":64,
         "tilewidth":64
        }, 
        {
         "columns":1,
         "firstgid":3,
         "image":"couldmid.png",
         "imageheight":128,
         "imagewidth":64,
         "margin":0,
         "name":"couldmid",
         "spacing":0,
         "tilecount":2,
         "tileheight":64,
         "tilewidth":64
        }, 
        {
         "columns":2,
         "firstgid":5,
         "image":"..\/..\/Downloads\/tilemap-master\/tilemap-master\/tilesets\/example.png",
         "imageheight":130,
         "imagewidth":128,
         "margin":0,
         "name":"example",
         "spacing":0,
         "tilecount":4,
         "tileheight":64,
         "tileproperties":
            {
             "2":
                {
                 "solid":"true"
                }
            },
         "tilepropertytypes":
            {
             "2":
                {
                 "solid":"string"
                }
            },
         "tilewidth":64
        }],
 "tilewidth":64,
 "version":1,
 "width":5
}
},{}],4:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Game = require('./game');
const Vector = require('./vector');
const Camera = require('./camera');
const Player = require('./player');
const BulletPool = require('./bullet_pool');
const Tilemap = require('./tilemap');
const Weapons = require('./weapons');
const Monst1 = require('./monst1');
const EntityManager = require('./entity-manager.js');
const MS_PER_FRAME = 1000/8;

/* Global variables */
var canvas = document.getElementById('screen');
var game = new Game(canvas, update, render);
var input = {
  up: false,
  down: false,
  left: false,
  right: false,
  space: false
}
var camera = new Camera(canvas);
var entities = new EntityManager(canvas.width, 180000, 32)
var bullets = new BulletPool(10);
var missiles = [];
var weapons = [];
var player = new Player(bullets, missiles, weapons);
var maps = [];
var bgMidTilemapData = require('../assets/background/midground.json');
var bgForeTilemapData = require('../assets/background/foreground.json');
var bgBackTilemapData = require('../assets/background/background.json');

maps[0] = new Tilemap(bgBackTilemapData);
maps[1] = new Tilemap(bgMidTilemapData);
maps[2] = new Tilemap(bgForeTilemapData);

var playerScore;
var playerLives;
var level = 1;

var monst1s = [];
monst1s[0] = new Monst1(150, 15000);
var gameOver = false;
var levelOver = false;
var levelOverTimer = 0;
var gameOverTimer = 0;
var numberOfEntities = 0;
var score = 0;
var innerScoreText = 'Score: ';
var hitTimeout = false;
var hitTimeoutTimer = 0;

entities.addEntity(player);
numberOfEntities++;
entities.addEntity(monst1s[0]);
numberOfEntities++;

/**
 * @function onkeydown
 * Handles keydown events
 */
window.onkeydown = function(event) {
  console.log(event.key);
  switch(event.key) {
    case "ArrowUp":
    case "w":
      input.up = true;
      event.preventDefault();
      break;
    case "ArrowDown":
    case "s":
      input.down = true;
      event.preventDefault();
      break;
    case "ArrowLeft":
    case "a":
      input.left = true;
      event.preventDefault();
      break;
    case "ArrowRight":
    case "d":
      input.right = true;
      event.preventDefault();
      break;
    case " ":
      input.space = true;
      //player.fireBullet({x: this.x, y: this.y});
      player.fireWeapons(entities);
      event.preventDefault();
      break;

  }
}

/**
 * @function onkeyup
 * Handles keydown events
 */
window.onkeyup = function(event) {
  switch(event.key) {
    case "ArrowUp":
    case "w":
      input.up = false;
      event.preventDefault();
      break;
    case "ArrowDown":
    case "s":
      input.down = false;
      event.preventDefault();
      break;
    case "ArrowLeft":
    case "a":
      input.left = false;
      event.preventDefault();
      break;
    case "ArrowRight":
    case "d":
      input.right = false;
      event.preventDefault();
      break;
    case "SpaceBar":
    case " ":
      input.space = false
      event.preventDefault();
  }
}

/**
 * @function masterLoop
 * Advances the game in sync with the refresh rate of the screen
 * @param {DOMHighResTimeStamp} timestamp the current time
 */
var masterLoop = function(timestamp) {
  game.loop(timestamp);
  window.requestAnimationFrame(masterLoop);
}
masterLoop(performance.now());

/**
 * @function update
 * Updates the game state, moving
 * game objects and handling interactions
 * between them.
 * @param {DOMHighResTimeStamp} elapsedTime indicates
 * the number of milliseconds passed since the last frame.
 */
function update(elapsedTime) {
  checkEndLevel();

  // update the player
  player.update(elapsedTime, input, camera);

  // update the camera
  camera.update(player.position);

  // Update bullets
  bullets.update(elapsedTime, function(bullet){
    if(!camera.onScreen(bullet)) return true;
    return false;
  });

  // // Update missiles
  var markedForRemoval = [];
  weapons.forEach(function(weapon, i){
    weapon.update(elapsedTime);
    if(Math.abs(camera.y - weapon.position.y) > (camera.y - camera.height *2))
      markedForRemoval.unshift(i);
  });
  // Remove missiles that have gone off-screen
  markedForRemoval.forEach(function(index){
    weapons.splice(index, 1);
  });

  monst1s.forEach(function(monst1, i){
    monst1.update(elapsedTime);
  });

  entities.updateEntity(player);
  entities.updateEntity(monst1s[0]);

  entities.collide(function(entity1, entity2) {
    if(entity1.type == "player" && hitTimeout == false){
      entity1.health -= 10;
      hitTimeout = true;
    }
    else if (entity2.type == "player" && hitTimeout == false){
      entity2.health -= 10;
      hitTimeout = true;
    }
    else if (entity1.type == "weapon" && entity2.type == "enemy"){
      entity2.health -= 10;
      score += 100;
    }
  });

  if(hitTimeout){
    hitTimeoutTimer += elapsedTime;
    if(hitTimeoutTimer > MS_PER_FRAME * 3){
      hitTimeout = false;
      hitTimeoutTimer = 0;
    }
  }
  if(levelOver){
    levelOverTimer += elapsedTime;
    if(levelOverTimer > MS_PER_FRAME * 40){
      levelOver = false;
      levelOverTimer = 0;
      level++;
      player.position.x = 200;
      player.position.y = 16500;
      camera.x = 0;
      camera.y = 16000;
    }
  }
  // var markedForRemoval = [];
  // missiles.forEach(function(missile, i){
  //   missile.update(elapsedTime);
  //   if(Math.abs(missile.position.x - camera.x) > camera.width * 2)
  //     markedForRemoval.unshift(i);
  // });
  // // Remove missiles that have gone off-screen
  // markedForRemoval.forEach(function(index){
  //   missiles.splice(index, 1);
  // });
}

/**
  * @function render
  * Renders the current game state into a back buffer.
  * @param {DOMHighResTimeStamp} elapsedTime indicates
  * the number of milliseconds passed since the last frame.
  * @param {CanvasRenderingContext2D} ctx the context to render to
  */
function render(elapsedTime, ctx) {
  ctx.fillStyle = "black";
  ctx.fillRect(0, 0, 320, 786);
  if(!levelOver && !gameOver){
    // TODO: Render background
    renderBackgrounds(elapsedTime, ctx);
    // Transform the coordinate system using
    // the camera position BEFORE rendering
    // objects in the world - that way they
    // can be rendered in WORLD cooridnates
    // but appear in SCREEN coordinates
    ctx.save();
    ctx.translate(-camera.x, -camera.y);
    renderWorld(elapsedTime, ctx);
    ctx.restore();

    // Render the GUI without transforming the
    // coordinate system
    renderGUI(elapsedTime, ctx);
  }
  if(levelOver){
    ctx.font = "45px Georgia"
    ctx.fillStyle = "red";
    ctx.fillText(innerScoreText, 15, 384);
    ctx.fillText(score, 150, 384);
    ctx.fillText('Level', 15, 200);
    ctx.fillText(level, 150, 200);
  }
}

function renderBackgrounds(elapsedTime, ctx) {
  ctx.save();

  // The background scrolls at 2% of the foreground speed
  ctx.translate(0, -camera.y);
  maps[0].render(ctx);
  ctx.restore();

  // The midground scrolls at 60% of the foreground speed
  ctx.save();
  ctx.translate(0, -camera.y*.6);
  maps[1].render(ctx);
  ctx.restore();

  // The foreground scrolls in sync with the camera
  ctx.save();
ctx.translate(0, -camera.y*.2);
  maps[2].render(ctx);
  ctx.restore();
}
/**

  * @function renderWorld
  * Renders the entities in the game world
  * IN WORLD COORDINATES
  * @param {DOMHighResTimeStamp} elapsedTime
  * @param {CanvasRenderingContext2D} ctx the context to render to
  */
function renderWorld(elapsedTime, ctx) {
    // Render the bullets
    bullets.render(elapsedTime, ctx);

    // Render the missiles
    missiles.forEach(function(missile) {
      missile.render(elapsedTime, ctx);
    });

    weapons.forEach(function(weapon){
      weapon.render(elapsedTime, ctx);
    });
    // Render the player
    player.render(elapsedTime, ctx);

    monst1s.forEach(function(monst1){
      monst1.render(elapsedTime, ctx);
    });

    entities.renderCells(ctx);
}

/**
  * @function renderGUI
  * Renders the game's GUI IN SCREEN COORDINATES
  * @param {DOMHighResTimeStamp} elapsedTime
  * @param {CanvasRenderingContext2D} ctx
  */
function renderGUI(elapsedTime, ctx) {
  // TODO: Render the GUI
  ctx.font = "25px Georgia"
  ctx.fillText(innerScoreText, 200, 40);
  ctx.fillText(score, 270, 40);
  ctx.fillStyle = "red";
  ctx.fillRect(10, 10, player.health, 10);
}

function spawnMonsters(){
  monst1s.push(new Monst1(150, 14000));
}

function checkEndLevel(){
  if(player.position.y < 400){
    levelOver = true;

  }
}

},{"../assets/background/background.json":1,"../assets/background/foreground.json":2,"../assets/background/midground.json":3,"./bullet_pool":5,"./camera":6,"./entity-manager.js":7,"./game":8,"./monst1":10,"./player":11,"./tilemap":13,"./vector":14,"./weapons":15}],5:[function(require,module,exports){
"use strict";

/**
 * @module BulletPool
 * A class for managing bullets in-game
 * We use a Float32Array to hold our bullet info,
 * as this creates a single memory buffer we can
 * iterate over, minimizing cache misses.
 * Values stored are: positionX, positionY, velocityX,
 * velocityY in that order.
 */
module.exports = exports = BulletPool;

/**
 * @constructor BulletPool
 * Creates a BulletPool of the specified size
 * @param {uint} size the maximum number of bullets to exits concurrently
 */
function BulletPool(maxSize) {
  this.pool = new Float32Array(4 * maxSize);
  this.end = 0;
  this.max = maxSize;
}

/**
 * @function add
 * Adds a new bullet to the end of the BulletPool.
 * If there is no room left, no bullet is created.
 * @param {Vector} position where the bullet begins
 * @param {Vector} velocity the bullet's velocity
*/
BulletPool.prototype.add = function(position, velocity) {
  if(this.end < this.max) {
    this.pool[4*this.end] = position.x;
    this.pool[4*this.end+1] = position.y;
    this.pool[4*this.end+2] = velocity.x;
    this.pool[4*this.end+3] = velocity.y;
    this.end++;
  }
}

/**
 * @function update
 * Updates the bullet using its stored velocity, and
 * calls the callback function passing the transformed
 * bullet.  If the callback returns true, the bullet is
 * removed from the pool.
 * Removed bullets are replaced with the last bullet's values
 * and the size of the bullet array is reduced, keeping
 * all live bullets at the front of the array.
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {function} callback called with the bullet's position,
 * if the return value is true, the bullet is removed from the pool
 */
BulletPool.prototype.update = function(elapsedTime, callback) {
  for(var i = 0; i < this.end; i++){
    // Move the bullet
    this.pool[4*i] += this.pool[4*i+2];
    this.pool[4*i+1] += this.pool[4*i+3];
    // If a callback was supplied, call it
    if(callback && callback({
      x: this.pool[4*i],
      y: this.pool[4*i+1]
    })) {
      // Swap the current and last bullet if we
      // need to remove the current bullet
      this.pool[4*i] = this.pool[4*(this.end-1)];
      this.pool[4*i+1] = this.pool[4*(this.end-1)+1];
      this.pool[4*i+2] = this.pool[4*(this.end-1)+2];
      this.pool[4*i+3] = this.pool[4*(this.end-1)+3];
      // Reduce the total number of bullets by 1
      this.end--;
      // Reduce our iterator by 1 so that we update the
      // freshly swapped bullet.
      i--;
    }
  }
}

/**
 * @function render
 * Renders all bullets in our array.
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
BulletPool.prototype.render = function(elapsedTime, ctx) {
  // Render the bullets as a single path
  ctx.save();
  ctx.beginPath();
  ctx.fillStyle = "black";
  for(var i = 0; i < this.end; i++) {
    ctx.moveTo(this.pool[4*i], this.pool[4*i+1]);
    ctx.arc(this.pool[4*i], this.pool[4*i+1], 2, 0, 2*Math.PI);
  }
  ctx.fill();
  ctx.restore();
}

},{}],6:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');

/**
 * @module Camera
 * A class representing a simple camera
 */
module.exports = exports = Camera;

/**
 * @constructor Camera
 * Creates a camera
 * @param {Rect} screen the bounds of the screen
 */
function Camera(screen) {
  this.x = 0;
  this.y = 16000;
  this.width = screen.width;
  this.height = screen.height;
}

/**
 * @function update
 * Updates the camera based on the supplied target
 * @param {Vector} target what the camera is looking at
 */
Camera.prototype.update = function(target) {
  // TODO: Align camera with player
  this.y = this.y - 2;
}

/**
 * @function onscreen
 * Determines if an object is within the camera's gaze
 * @param {Vector} target a point in the world
 * @return true if target is on-screen, false if not
 */
Camera.prototype.onScreen = function(target) {
  return (
     target.x > this.x &&
     target.x < this.x + this.width &&
     target.y > this.y &&
     target.y < this.y + this.height
   );
}

/**
 * @function toScreenCoordinates
 * Translates world coordinates into screen coordinates
 * @param {Vector} worldCoordinates
 * @return the tranformed coordinates
 */
Camera.prototype.toScreenCoordinates = function(worldCoordinates) {
  return Vector.subtract(worldCoordinates, this);
}

/**
 * @function toWorldCoordinates
 * Translates screen coordinates into world coordinates
 * @param {Vector} screenCoordinates
 * @return the tranformed coordinates
 */
Camera.prototype.toWorldCoordinates = function(screenCoordinates) {
  return Vector.add(screenCoordinates, this);
}

},{"./vector":14}],7:[function(require,module,exports){
module.exports = exports = EntityManager;

function EntityManager(width, height, cellSize) {
  this.cellSize = cellSize;
  this.widthInCells = Math.ceil(width / cellSize);
  this.heightInCells = Math.ceil(height / cellSize);
  this.cells = [];
  this.numberOfCells = this.widthInCells * this.heightInCells;
  for(var i = 0; i < this.numberOfCells; i++) {
    this.cells[i] = [];
  }
  this.cells[-1] = [];
}

function getIndex(x, y) {
  var x = Math.floor(x / this.cellSize);
  var y = Math.floor(y / this.cellSize);
  if(x < 0 ||
     x >= this.widthInCells ||
     y < 0 ||
     y >= this.heightInCells
  ) return -1;
  return y * this.widthInCells + x;
}

EntityManager.prototype.addEntity = function(entity){
  var index = getIndex.call(this, entity.position.x, entity.position.y);
  this.cells[index].push(entity);
  entity._cell = index;
}

EntityManager.prototype.updateEntity = function(entity){
  var index = getIndex.call(this, entity.position.x, entity.position.y);
  // If we moved to a new cell, remove from old and add to new
  if(index != entity._cell) {
    var cellIndex = this.cells[entity._cell].indexOf(entity);
    if(cellIndex != -1) this.cells[entity._cell].splice(cellIndex, 1);
    this.cells[index].push(entity);
    entity._cell = index;
  }
}

EntityManager.prototype.removeEntity = function(entity) {
  var cellIndex = this.cells[entity._cell].indexOf(entity);
  if(cellIndex != -1) this.cells[entity._cell].splice(cellIndex, 1);
  entity._cell = undefined;
}

EntityManager.prototype.collide = function(callback) {
  var self = this;
  this.cells.forEach(function(cell, i) {
    // test for collisions
    cell.forEach(function(entity1) {
      // check for collisions with cellmates
      cell.forEach(function(entity2) {
        if(entity1 != entity2) checkForCollision(entity1, entity2, callback);

        // check for collisions in cell to the right
        if(i % (self.widthInCells - 1) != 0) {
          self.cells[i+1].forEach(function(entity2) {
            checkForCollision(entity1, entity2, callback);
          });
        }

        // check for collisions in cell below
        if(i < self.numberOfCells - self.widthInCells) {
          self.cells[i+self.widthInCells].forEach(function(entity2){
            checkForCollision(entity1, entity2, callback);
          });
        }

        // check for collisions diagionally below and right
        if(i < self.numberOfCells - self.withInCells && i % (self.widthInCells - 1) != 0) {
          self.cells[i+self.widthInCells + 1].forEach(function(entity2){
            checkForCollision(entity1, entity2, callback);
          });
        }
      });
    });
  });
}

function checkForCollision(entity1, entity2, callback) {
  var collides = !(entity1.position.x + entity1.width < entity2.position.x ||
                   entity1.position.x > entity2.position.x + entity2.width ||
                   entity1.position.y + entity1.height < entity2.position.y ||
                   entity1.position.y > entity2.position.y + entity2.height);
  if(collides) {
    callback(entity1, entity2);
  }
}

EntityManager.prototype.renderCells = function(ctx) {
  for(var x = 0; x < this.widthInCells; x++) {
    for(var y = 0; y < this.heightInCells; y++) {
      ctx.strokeStyle = '#333333';
      ctx.strokeRect(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize);
    }
  }
}

},{}],8:[function(require,module,exports){
"use strict";

/**
 * @module exports the Game class
 */
module.exports = exports = Game;

/**
 * @constructor Game
 * Creates a new game object
 * @param {canvasDOMElement} screen canvas object to draw into
 * @param {function} updateFunction function to update the game
 * @param {function} renderFunction function to render the game
 */
function Game(screen, updateFunction, renderFunction) {
  this.update = updateFunction;
  this.render = renderFunction;

  // Set up buffers
  this.frontBuffer = screen;
  this.frontCtx = screen.getContext('2d');
  this.backBuffer = document.createElement('canvas');
  this.backBuffer.width = screen.width;
  this.backBuffer.height = screen.height;
  this.backCtx = this.backBuffer.getContext('2d');

  // Start the game loop
  this.oldTime = performance.now();
  this.paused = false;
}

/**
 * @function pause
 * Pause or unpause the game
 * @param {bool} pause true to pause, false to start
 */
Game.prototype.pause = function(flag) {
  this.paused = (flag == true);
}

/**
 * @function loop
 * The main game loop.
 * @param{time} the current time as a DOMHighResTimeStamp
 */
Game.prototype.loop = function(newTime) {
  var game = this;
  var elapsedTime = newTime - this.oldTime;
  this.oldTime = newTime;

  if(!this.paused) this.update(elapsedTime);
  this.render(elapsedTime, this.frontCtx);

  // Flip the back buffer
  this.frontCtx.drawImage(this.backBuffer, 0, 0);
}

},{}],9:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');
const SmokeParticles = require('./smoke_particles');

/* Constants */
const MISSILE_SPEED = 8;

/**
 * @module Missile
 * A class representing a player's missile
 */
module.exports = exports = Missile;

/**
 * @constructor Missile
 * Creates a missile
 * @param {Vector} position the position of the missile
 * @param {Object} target the target of the missile
 */
function Missile(position, target) {
  this.position = {x: position.x, y:position.y}
  this.target = target;
  this.angle = 0;
  this.img = new Image()
  this.img.src = 'assets/helicopter.png';
  this.smokeParticles = new SmokeParticles(400);
}

/**
 * @function update
 * Updates the missile, steering it towards a locked
 * target or straight ahead
 * @param {DOMHighResTimeStamp} elapedTime
 */
Missile.prototype.update = function(elapsedTime) {

  // set the velocity
  var velocity = {x: 0, y: MISSILE_SPEED}
  if(this.target) {
    var direction = Vector.subtract(this.position, this.target);
    velocity = Vector.scale(Vector.normalize(direction), MISSILE_SPEED);
  }

  // determine missile angle
  this.angle = Math.atan2(velocity.y, velocity.x);

  // move the missile
  this.position.x += velocity.x;
  this.position.y += velocity.y;

  // emit smoke
  this.smokeParticles.emit(this.position);

  // update smoke
  this.smokeParticles.update(elapsedTime);
}

/**
 * @function render
 * Renders the missile in world coordinates
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
Missile.prototype.render = function(elapsedTime, ctx) {
  // Draw Missile
  ctx.save();
  ctx.translate(this.position.x, this.position.y);
  ctx.rotate(this.angle);
  ctx.drawImage(this.img, 76, 56, 16, 8, 0, -4, 16, 8);
  ctx.restore();
  // Draw Smoke
  this.smokeParticles.render(elapsedTime, ctx);
}

},{"./smoke_particles":12,"./vector":14}],10:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');
const MS_PER_FRAME = 1000/8;

/**
 * @module Monst1
 * A class representing an enemy
 */
module.exports = exports = Monst1;

/**
 * @constructor Monst1
 * Creates an enemy
 * @param {BulletPool} bullets the bullet pool
 */
function Monst1(startX, startY) {
  this.position = {x: startX, y: startY};
  this.velocity = {x: 0, y: 2};
  this.img = new Image()
  this.img.src = 'assets/ships1.png';
  this.timer1 = 0;
  this.timer2 = 0;
  this.frame = 0;
  this.width = 48;
  this.height = 54;
  this.type = "enemy";
}
Monst1.prototype.update = function(elapsedTime) {
  this.timer1 += elapsedTime;
      if(this.timer1 > MS_PER_FRAME) {
        this.timer1 = 0;
        this.frame += 1;
        if(this.frame > 3){
          this.frame = 0;
          this.timer1 = 0;
        }
}
  // move the enemy
  this.position.x += this.velocity.x;
  this.position.y += this.velocity.y;

}

/**
 * @function render
 * Renders the player helicopter in world coordinates
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
Monst1.prototype.render = function(elapasedTime, ctx) {
  ctx.save();
  ctx.translate(this.position.x, this.position.y);
  if(this.frame == 0)ctx.drawImage(this.img, 0, 0, 48, 54, -12.5, -12, 48, 54);
  if(this.frame == 1)ctx.drawImage(this.img, 48, 0, 48, 54, -12.5, -12, 48, 54);
  if(this.frame == 2)ctx.drawImage(this.img, 96, 0, 48, 54, -12.5, -12, 48, 54);
  if(this.frame == 3)ctx.drawImage(this.img, 144, 0, 48, 54, -12.5, -12, 48, 54);
  ctx.strokeStyle = this.color;
  ctx.strokeRect(this.x, this.y, this.width, this.height);
  ctx.restore();
}

},{"./vector":14}],11:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');
const Missile = require('./missile');
const Weapons = require('./weapons');
const Camera = require('./camera');
const EntityManager = require('./entity-manager.js');

/* Constants */
const PLAYER_SPEED = 5;
const BULLET_SPEED = 10;

/**
 * @module Player
 * A class representing a player's helicopter
 */
module.exports = exports = Player;

/**
 * @constructor Player
 * Creates a player
 * @param {BulletPool} bullets the bullet pool
 */
function Player(bullets, missiles, weapons) {
  this.missiles = missiles;
  this.weapons = weapons;
  this.missileCount = 4;
  this.bullets = bullets;
  this.angle = 0;
  this.position = {x: 200, y: 16500};
  this.velocity = {x: 0, y: 0};
  this.img = new Image()
  this.img.src = 'assets/tyrian.shp.007D3C.png';
  this.health = 100;
  this.width = 23;
  this.height = 27;
  this.type = "player";
}

/**
 * @function update
 * Updates the player based on the supplied input
 * @param {DOMHighResTimeStamp} elapedTime
 * @param {Input} input object defining input, must have
 * boolean properties: up, left, right, down
 */
Player.prototype.update = function(elapsedTime, input, camera) {

  // set the velocity
  this.velocity.x = 0;
  if(input.left) this.velocity.x -= PLAYER_SPEED;
  if(input.right) this.velocity.x += PLAYER_SPEED;
  this.velocity.y = -2;
  if(input.up) this.velocity.y -= PLAYER_SPEED / 2;
  if(input.down) this.velocity.y += PLAYER_SPEED / 2;

  // determine player angle
  this.angle = 0;
  if(this.velocity.x < 0) this.angle = -1;
  if(this.velocity.x > 0) this.angle = 1;

  // move the player
  this.position.x += this.velocity.x;
  this.position.y += this.velocity.y;

  // // don't let the player move off-screen
  if(this.position.x < 0) this.position.x = 0;
  if(this.position.x > 320) this.position.x = 320;
  if(this.position.y < camera.y) this.position.y = camera.y;
}

/**
 * @function render
 * Renders the player helicopter in world coordinates
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
Player.prototype.render = function(elapasedTime, ctx) {
  var offset = this.angle * 23;
  ctx.save();
  ctx.translate(this.position.x, this.position.y);
  ctx.drawImage(this.img, 48+offset, 57, 23, 27, -12.5, -12, 23, 27);
  ctx.strokeStyle = this.color;
  ctx.strokeRect(this.x, this.y, this.width, this.height);
  ctx.restore();
}

/**
 * @function fireBullet
 * Fires a bullet
 * @param {Vector} direction
 */
Player.prototype.fireBullet = function(direction) {
  var position = Vector.add(this.position, {x:30, y:30});
  var velocity = Vector.scale(Vector.normalize(direction), BULLET_SPEED);
  this.bullets.add(position, velocity);
}

/**
 * @function fireMissile
 * Fires a missile, if the player still has missiles
 * to fire.
 */
Player.prototype.fireMissile = function() {
  if(this.missileCount > 0){
    var position = Vector.add(this.position, {x:0, y:30})
    var missile = new Missile(position);
    this.missiles.push(missile);
    this.missileCount--;
  }
}

/**
 * @function fireMissile
 * Fires a missile, if the player still has missiles
 * to fire.
 */
Player.prototype.fireWeapons = function(entities) {
    var position = Vector.add(this.position, {x:-3, y:-20})
    var weapons = new Weapons(position);
    this.weapons.push(weapons);
    entities.addEntity(weapons);
}

Player.prototype.explode = function() {

}

},{"./camera":6,"./entity-manager.js":7,"./missile":9,"./vector":14,"./weapons":15}],12:[function(require,module,exports){
"use strict";

/**
 * @module SmokeParticles
 * A class for managing a particle engine that
 * emulates a smoke trail
 */
module.exports = exports = SmokeParticles;

/**
 * @constructor SmokeParticles
 * Creates a SmokeParticles engine of the specified size
 * @param {uint} size the maximum number of particles to exist concurrently
 */
function SmokeParticles(maxSize) {
  this.pool = new Float32Array(3 * maxSize);
  this.start = 0;
  this.end = 0;
  this.wrapped = false;
  this.max = maxSize;
}

/**
 * @function emit
 * Adds a new particle at the given position
 * @param {Vector} position
*/
SmokeParticles.prototype.emit = function(position) {
  if(this.end != this.max) {
    this.pool[3*this.end] = position.x;
    this.pool[3*this.end+1] = position.y;
    this.pool[3*this.end+2] = 0.0;
    this.end++;
  } else {
    this.pool[3] = position.x;
    this.pool[4] = position.y;
    this.pool[5] = 0.0;
    this.end = 1;
  }
}

/**
 * @function update
 * Updates the particles
 * @param {DOMHighResTimeStamp} elapsedTime
 */
SmokeParticles.prototype.update = function(elapsedTime) {
  function updateParticle(i) {
    this.pool[3*i+2] += elapsedTime;
    if(this.pool[3*i+2] > 2000) this.start = i;
  }
  var i;
  if(this.wrapped) {
    for(i = 0; i < this.end; i++){
      updateParticle.call(this, i);
    }
    for(i = this.start; i < this.max; i++){
      updateParticle.call(this, i);
    }
  } else {
    for(i = this.start; i < this.end; i++) {
      updateParticle.call(this, i);
    }
  }
}

/**
 * @function render
 * Renders all bullets in our array.
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
SmokeParticles.prototype.render = function(elapsedTime, ctx) {
  function renderParticle(i){
    var alpha = 1 - (this.pool[3*i+2] / 1000);
    var radius = 0.1 * this.pool[3*i+2];
    if(radius > 5) radius = 5;
    ctx.beginPath();
    ctx.arc(
      this.pool[3*i],   // X position
      this.pool[3*i+1], // y position
      radius, // radius
      0,
      2*Math.PI
    );
    ctx.fillStyle = 'rgba(160, 160, 160,' + alpha + ')';
    ctx.fill();
  }

  // Render the particles individually
  var i;
  if(this.wrapped) {
    for(i = 0; i < this.end; i++){
      renderParticle.call(this, i);
    }
    for(i = this.start; i < this.max; i++){
      renderParticle.call(this, i);
    }
  } else {
    for(i = this.start; i < this.end; i++) {
      renderParticle.call(this, i);
    }
  }
}

},{}],13:[function(require,module,exports){
"use strict";

// Tilemap engine defined using the Module pattern
module.exports = exports = Tilemap;

function Tilemap(mapData, options){
  this.tiles = [],
        this.tilesets = [],
        this.layers = [],
        this.tileWidth = mapData.tilewidth,
        this.tileHeight = mapData.tileheight,
        this.mapWidth = mapData.width,
        this.mapHeight = mapData.height;

      this.loading = 0;

      var self = this;

    // Load the tileset(s)
    mapData.tilesets.forEach( function(tilesetmapData, index) {
      // Load the tileset image
      var tileset = new Image();
      self.loading++;
      tileset.onload = function() {
        self.loading--;
        if(self.loading == 0 && options.onload) options.onload();
      }
      tileset.src = tilesetmapData.image;
      self.tilesets.push(tileset);

      // Create the tileset's tiles
      var colCount = Math.floor(tilesetmapData.imagewidth / self.tileWidth),
          rowCount = Math.floor(tilesetmapData.imageheight / self.tileHeight),
          tileCount = colCount * rowCount;

      for(var i = 0; i < tileCount; i++) {
        var tile = {
          // Reference to the image, shared amongst all tiles in the tileset
          image: tileset,
          // Source x position.  i % colCount == col number (as we remove full rows)
          sx: (i % colCount) * self.tileWidth,
          // Source y position. i / colWidth (integer division) == row number
          sy: Math.floor(i / rowCount) * self.tileHeight,
        }
        self.tiles.push(tile);
      }
    });

    // Parse the layers in the map
    mapData.layers.forEach( function(layerData) {

      // Tile layers need to be stored in the engine for later
      // rendering
      if(layerData.type == "tilelayer") {
        // Create a layer object to represent this tile layer
        var layer = {
          name: layerData.name,
          width: layerData.width,
          height: layerData.height,
          visible: layerData.visible
        }

        // Set up the layer's data array.  We'll try to optimize
        // by keeping the index data type as small as possible
        if(self.tiles.length < Math.pow(2,8))
          layer.data = new Uint8Array(layerData.data);
        else if (self.tiles.length < Math.Pow(2, 16))
          layer.data = new Uint16Array(layerData.data);
        else
          layer.data = new Uint32Array(layerData.data);

        // save the tile layer
        self.layers.push(layer);
      }
    });
  }

Tilemap.prototype.render = function(screenCtx) {
    // Render tilemap layers - note this assumes
    // layers are sorted back-to-front so foreground
    // layers obscure background ones.
    // see http://en.wikipedia.org/wiki/Painter%27s_algorithm
    var self = this;
    this.layers.forEach(function(layer){

      // Only draw layers that are currently visible
      if(layer.visible) {
        for(var y = 0; y < layer.height; y++) {
          for(var x = 0; x < layer.width; x++) {
            var tileId = layer.data[x + layer.width * y];

            // tiles with an id of 0 don't exist
            if(tileId != 0) {
              var tile = self.tiles[tileId - 1];
              if(tile.image) { // Make sure the image has loaded
                screenCtx.drawImage(
                  tile.image,     // The image to draw
                  tile.sx, tile.sy, self.tileWidth, self.tileHeight, // The portion of image to draw
                  x*self.tileWidth, y*self.tileHeight, self.tileWidth, self.tileHeight // Where to draw the image on-screen
                );
              }
            }

          }
        }
      }

    });
  }

Tilemap.prototype.tileAt = function(x, y, layer) {
    // sanity check
    if(layer < 0 || x < 0 || y < 0 || layer >= layers.length || x > mapWidth || y > mapHeight)
      return undefined;
    return tiles[layers[layer].data[x + y*mapWidth] - 1];
  }

},{}],14:[function(require,module,exports){
"use strict";

/**
 * @module Vector
 * A library of vector functions.
 */
module.exports = exports = {
  add: add,
  subtract: subtract,
  scale: scale,
  rotate: rotate,
  dotProduct: dotProduct,
  magnitude: magnitude,
  normalize: normalize
}


/**
 * @function rotate
 * Scales a vector
 * @param {Vector} a - the vector to scale
 * @param {float} scale - the scalar to multiply the vector by
 * @returns a new vector representing the scaled original
 */
function scale(a, scale) {
 return {x: a.x * scale, y: a.y * scale};
}

/**
 * @function add
 * Computes the sum of two vectors
 * @param {Vector} a the first vector
 * @param {Vector} b the second vector
 * @return the computed sum
*/
function add(a, b) {
 return {x: a.x + b.x, y: a.y + b.y};
}

/**
 * @function subtract
 * Computes the difference of two vectors
 * @param {Vector} a the first vector
 * @param {Vector} b the second vector
 * @return the computed difference
 */
function subtract(a, b) {
  return {x: a.x - b.x, y: a.y - b.y};
}

/**
 * @function rotate
 * Rotates a vector about the Z-axis
 * @param {Vector} a - the vector to rotate
 * @param {float} angle - the angle to roatate by (in radians)
 * @returns a new vector representing the rotated original
 */
function rotate(a, angle) {
  return {
    x: a.x * Math.cos(angle) - a.y * Math.sin(angle),
    y: a.x * Math.sin(angle) + a.y * Math.cos(angle)
  }
}

/**
 * @function dotProduct
 * Computes the dot product of two vectors
 * @param {Vector} a the first vector
 * @param {Vector} b the second vector
 * @return the computed dot product
 */
function dotProduct(a, b) {
  return a.x * b.x + a.y * b.y
}

/**
 * @function magnitude
 * Computes the magnitude of a vector
 * @param {Vector} a the vector
 * @returns the calculated magnitude
 */
function magnitude(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
}

/**
 * @function normalize
 * Normalizes the vector
 * @param {Vector} a the vector to normalize
 * @returns a new vector that is the normalized original
 */
function normalize(a) {
  var mag = magnitude(a);
  return {x: a.x / mag, y: a.y / mag};
}

},{}],15:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');
const SmokeParticles = require('./smoke_particles');


/**
 * @module Weapons
 * A class representing a player's Weapons
 */
module.exports = exports = Weapons;

/**
 * @constructor Missile
 * Creates a missile
 * @param {Vector} position the position of the Weapons
 * @param {Object} target the target of the Weapons
 */
function Weapons(position, type) {
  this.position = {x: position.x, y:position.y}
  this.weaponSpeed = 8;
  this.angle = 0;
  this.img = new Image()
  this.img.src = 'assets/newsh(.shp.000000.png';
  this.smokeParticles = new SmokeParticles(400);
  this.type = 1;
  this.width = 20;
  this.height = 20;
  this.type = "weapon";
}

/**
 * @function update
 * Updates the Weapons, steering it towards a locked
 * target or straight ahead
 * @param {DOMHighResTimeStamp} elapedTime
 */
Weapons.prototype.update = function(elapsedTime) {

  // set the velocity
  var velocity = {x: 0, y: -this.weaponSpeed}
  if(this.target) {
    var direction = Vector.subtract(this.position, this.target);
    velocity = Vector.scale(Vector.normalize(direction), this.weaponSpeed);
  }

  // determine missile angle
  this.angle = Math.atan2(velocity.y, velocity.x);
  // move the missile
  this.position.x += velocity.x;
  this.position.y += velocity.y;

  // emit smoke
  this.smokeParticles.emit(this.position);

  // update smoke
  this.smokeParticles.update(elapsedTime);
}

/**
 * @function render
 * Renders the Weapons in world coordinates
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
Weapons.prototype.render = function(elapsedTime, ctx) {
  // Draw Missile
  ctx.save();
  ctx.translate(this.position.x, this.position.y);
  //ctx.rotate(this.angle);
  if(this.type == 1)ctx.drawImage(this.img, 0, 41, 12, 12, 0, -4, 12, 12);
  if(this.type == 2)ctx.drawImage(this.img, 121, 43, 13, 11, -6, -4, 13, 11);
  ctx.restore();
  // Draw Smoke
  //this.smokeParticles.render(elapsedTime, ctx);
}

},{"./smoke_particles":12,"./vector":14}]},{},[4]);
